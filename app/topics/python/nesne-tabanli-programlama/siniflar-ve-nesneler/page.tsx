import { Metadata } from 'next';
import MarkdownContent from "@/components/MarkdownContent";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import Image from "next/image";
import { ArrowRight, Code2, Settings, Terminal, BookOpen, GraduationCap } from "lucide-react";

export const metadata: Metadata = {
  title: 'Python SÄ±nÄ±flar ve Nesneler | AIKOD',
  description: 'Python\'da sÄ±nÄ±f ve nesne kavramlarÄ±, constructor, instance metodlarÄ±, self parametresi ve daha fazlasÄ±.',
};

const content = `
# Python'da SÄ±nÄ±flar ve Nesneler

Nesne tabanlÄ± programlamanÄ±n temel yapÄ± taÅŸlarÄ± olan sÄ±nÄ±flar ve nesneler, kodunuzu daha organize ve yeniden kullanÄ±labilir hale getirmenizi saÄŸlar.

## SÄ±nÄ±f Nedir?

SÄ±nÄ±f (class), nesnelerin Ã¶zelliklerini ve davranÄ±ÅŸlarÄ±nÄ± tanÄ±mlayan bir ÅŸablondur. Ã–rneÄŸin, bir "Araba" sÄ±nÄ±fÄ± ÅŸu Ã¶zelliklere sahip olabilir:

\`\`\`python
class Araba:
    def __init__(self, marka, model, yil):
        self.marka = marka
        self.model = model
        self.yil = yil
        self.hiz = 0
    
    def hizlan(self, artis):
        self.hiz += artis
    
    def yavasla(self, azalis):
        self.hiz = max(0, self.hiz - azalis)
    
    def bilgi_goster(self):
        return f"{self.yil} {self.marka} {self.model}, HÄ±z: {self.hiz} km/s"
\`\`\`

## Nesne (Object) Nedir?

Nesne, bir sÄ±nÄ±fÄ±n Ã¶rneÄŸidir. Yani sÄ±nÄ±f ÅŸablonundan oluÅŸturulan somut bir varlÄ±ktÄ±r:

\`\`\`python
# Nesne oluÅŸturma
araba1 = Araba("Toyota", "Corolla", 2020)
araba2 = Araba("BMW", "X5", 2021)

# Nesne metodlarÄ±nÄ± kullanma
araba1.hizlan(50)
print(araba1.bilgi_goster())  # 2020 Toyota Corolla, HÄ±z: 50 km/s
\`\`\`

## Constructor (__init__)

Constructor, nesne oluÅŸturulduÄŸunda otomatik olarak Ã§aÄŸrÄ±lan Ã¶zel bir metoddur:

\`\`\`python
class Ogrenci:
    def __init__(self, ad, numara):
        self.ad = ad
        self.numara = numara
        self.dersler = []  # BoÅŸ liste ile baÅŸlat
        print(f"{ad} isimli Ã¶ÄŸrenci oluÅŸturuldu!")

# Constructor otomatik Ã§aÄŸrÄ±lÄ±r
ogrenci1 = Ogrenci("Ahmet", "123")
\`\`\`

## Self Parametresi

\`self\` parametresi, nesnenin kendisini temsil eder ve instance metodlarÄ±nda ilk parametre olarak kullanÄ±lÄ±r:

\`\`\`python
class Dikdortgen:
    def __init__(self, en, boy):
        self.en = en    # self ile nesne Ã¶zelliÄŸi
        self.boy = boy  # self ile nesne Ã¶zelliÄŸi
    
    def alan_hesapla(self):  # self parametresi
        return self.en * self.boy
    
    def cevre_hesapla(self):  # self parametresi
        return 2 * (self.en + self.boy)

# self otomatik gÃ¶nderilir
d1 = Dikdortgen(5, 3)
print(d1.alan_hesapla())  # 15
\`\`\`

## Instance MetodlarÄ±

Instance metodlarÄ±, nesnenin davranÄ±ÅŸlarÄ±nÄ± tanÄ±mlayan ve \`self\` parametresi alan metodlardÄ±r:

\`\`\`python
class BankaHesabi:
    def __init__(self, hesap_no, bakiye=0):
        self.hesap_no = hesap_no
        self.bakiye = bakiye
    
    def para_yatir(self, miktar):
        self.bakiye += miktar
        return f"{miktar} TL yatÄ±rÄ±ldÄ±. Yeni bakiye: {self.bakiye} TL"
    
    def para_cek(self, miktar):
        if miktar <= self.bakiye:
            self.bakiye -= miktar
            return f"{miktar} TL Ã§ekildi. Yeni bakiye: {self.bakiye} TL"
        return "Yetersiz bakiye!"

# Instance metodlarÄ±nÄ± kullanma
hesap = BankaHesabi("123456", 1000)
print(hesap.para_yatir(500))  # 500 TL yatÄ±rÄ±ldÄ±. Yeni bakiye: 1500 TL
print(hesap.para_cek(2000))   # Yetersiz bakiye!
\`\`\`

## Instance DeÄŸiÅŸkenleri

Instance deÄŸiÅŸkenleri her nesne iÃ§in ayrÄ± ayrÄ± oluÅŸturulur ve saklanÄ±r:

\`\`\`python
class Calisan:
    def __init__(self, ad, maas):
        self.ad = ad        # Instance deÄŸiÅŸkeni
        self.maas = maas    # Instance deÄŸiÅŸkeni
        self.projeler = []  # Instance deÄŸiÅŸkeni
    
    def proje_ekle(self, proje):
        self.projeler.append(proje)

# Her nesnenin kendi deÄŸiÅŸkenleri vardÄ±r
c1 = Calisan("Ali", 5000)
c2 = Calisan("Veli", 6000)

c1.proje_ekle("Web Sitesi")
c2.proje_ekle("Mobil Uygulama")

print(c1.projeler)  # ['Web Sitesi']
print(c2.projeler)  # ['Mobil Uygulama']
\`\`\`

## Ä°yi Pratikler

1. SÄ±nÄ±f isimleri PascalCase ile yazÄ±lÄ±r (Her kelimenin ilk harfi bÃ¼yÃ¼k)
2. Metod ve deÄŸiÅŸken isimleri snake_case ile yazÄ±lÄ±r
3. Her sÄ±nÄ±f tek bir sorumluluÄŸa sahip olmalÄ±dÄ±r
4. Constructor'da gerekli tÃ¼m baÅŸlangÄ±Ã§ deÄŸerleri atanmalÄ±dÄ±r
5. Metodlar anlamlÄ± isimler ile adlandÄ±rÄ±lmalÄ±dÄ±r

## Nesne Dizileriyle Ã‡alÄ±ÅŸma

Nesnelerle Ã§alÄ±ÅŸÄ±rken, birden fazla nesneyi bir dizide (liste veya tuple) saklayabilir ve Ã¼zerlerinde dÃ¶ngÃ¼lerle iÅŸlem yapabilirsiniz:

\`\`\`python
class Oyuncu:
    def __init__(self, x, y):
        self.x = x  # x koordinatÄ±
        self.y = y  # y koordinatÄ±

# Birden fazla nesne oluÅŸturma
oyuncu1 = Oyuncu(5, 6)
oyuncu2 = Oyuncu(2, 4)
oyuncu3 = Oyuncu(3, 6)

# Nesneleri bir listede saklama
oyuncular = [oyuncu1, oyuncu2, oyuncu3]

# TÃ¼m oyuncularÄ±n koordinatlarÄ±nÄ± yazdÄ±rma
for oyuncu in oyuncular:
    print(f"X: {oyuncu.x} Y: {oyuncu.y}")
\`\`\`

Bu Ã¶rnekte:
1. \`Oyuncu\` sÄ±nÄ±fÄ±, 2D dÃ¼nyada bir oyuncunun konumunu temsil eder
2. ÃœÃ§ farklÄ± oyuncu nesnesi oluÅŸturulur
3. Nesneler bir liste iÃ§inde saklanÄ±r
4. \`for\` dÃ¶ngÃ¼sÃ¼ ile her oyuncunun koordinatlarÄ± yazdÄ±rÄ±lÄ±r

DÃ¶ngÃ¼ her iterasyonda:
- Ä°lk iterasyonda \`oyuncu1\` nesnesi \`oyuncu\` deÄŸiÅŸkenine atanÄ±r
- Ä°kinci iterasyonda \`oyuncu2\` nesnesi \`oyuncu\` deÄŸiÅŸkenine atanÄ±r
- ÃœÃ§Ã¼ncÃ¼ iterasyonda \`oyuncu3\` nesnesi \`oyuncu\` deÄŸiÅŸkenine atanÄ±r

ğŸ’¡ Ä°pucu: DÃ¶ngÃ¼ deÄŸiÅŸkenine, iÃ§inde saklayacaÄŸÄ± nesne tipini temsil eden bir isim vermeniz Ã¶nerilir. Bu Ã¶rnekte \`oyuncu\` kullanÄ±lmÄ±ÅŸtÄ±r Ã§Ã¼nkÃ¼ deÄŸiÅŸken \`Oyuncu\` sÄ±nÄ±fÄ± nesnelerini tutar.

### Nesne Dizileriyle Ã‡alÄ±ÅŸmanÄ±n AvantajlarÄ±

1. **Kod TekrarÄ±nÄ± Azaltma**: AynÄ± iÅŸlemi birden fazla nesne iÃ§in tek bir dÃ¶ngÃ¼de yapabilirsiniz
2. **BakÄ±m KolaylÄ±ÄŸÄ±**: TÃ¼m nesneler iÃ§in yapÄ±lacak deÄŸiÅŸiklikler tek bir yerde yapÄ±lÄ±r
3. **Dinamik Ä°ÅŸlemler**: Ã‡alÄ±ÅŸma zamanÄ±nda nesne sayÄ±sÄ± deÄŸiÅŸse bile kod Ã§alÄ±ÅŸmaya devam eder
4. **Toplu Ä°ÅŸlemler**: Filtreleme, sÄ±ralama, dÃ¶nÃ¼ÅŸtÃ¼rme gibi iÅŸlemleri kolayca yapabilirsiniz

## AlÄ±ÅŸtÄ±rmalar

Pratik yaparak Ã¶ÄŸrenin:

1. BaÅŸlangÄ±Ã§ seviyesi Ã¶rnekler
2. Orta seviye projeler
3. Ä°leri seviye uygulamalar
4. Test senaryolarÄ±

`;

const sections = [
  {
    title: "SÄ±nÄ±f KavramÄ±",
    description: "SÄ±nÄ±flarÄ±n tanÄ±mÄ± ve temel Ã¶zellikleri",
    icon: <Code2 className="h-6 w-6" />,
    link: "/topics/python/nesne-tabanli-programlama/siniflar-ve-nesneler/sinif-kavrami",
    topics: [
      "SÄ±nÄ±f tanÄ±mlama",
      "Ã–zellikler (attributes)",
      "Metodlar (methods)",
      "SÄ±nÄ±f yapÄ±sÄ±"
    ]
  },
  {
    title: "Nesne OluÅŸturma",
    description: "SÄ±nÄ±flardan nesne Ã¶rnekleri oluÅŸturma",
    icon: <Settings className="h-6 w-6" />,
    link: "/topics/python/nesne-tabanli-programlama/siniflar-ve-nesneler/nesne-olusturma",
    topics: [
      "Constructor kullanÄ±mÄ±",
      "Nesne Ã¶rnekleme",
      "Parametre geÃ§me",
      "Nesne yaÅŸam dÃ¶ngÃ¼sÃ¼"
    ]
  },
  {
    title: "Instance MetodlarÄ±",
    description: "Nesne davranÄ±ÅŸlarÄ±nÄ± tanÄ±mlayan metodlar",
    icon: <Terminal className="h-6 w-6" />,
    link: "/topics/python/nesne-tabanli-programlama/siniflar-ve-nesneler/instance-metodlari",
    topics: [
      "Self parametresi",
      "Metod tanÄ±mlama",
      "Metod Ã§aÄŸÄ±rma",
      "Return deÄŸerleri"
    ]
  },
  {
    title: "Ä°yi Pratikler",
    description: "SÄ±nÄ±f ve nesne kullanÄ±m Ã¶nerileri",
    icon: <BookOpen className="h-6 w-6" />,
    link: "/topics/python/nesne-tabanli-programlama/siniflar-ve-nesneler/iyi-pratikler",
    topics: [
      "Ä°simlendirme kurallarÄ±",
      "Kod organizasyonu",
      "Hata yÃ¶netimi",
      "DokÃ¼mantasyon"
    ]
  },
  {
    title: "Nesne Dizileri",
    description: "Birden fazla nesneyle Ã§alÄ±ÅŸma teknikleri",
    icon: <Code2 className="h-6 w-6" />,
    link: "/topics/python/nesne-tabanli-programlama/siniflar-ve-nesneler/nesne-dizileri",
    topics: [
      "Liste ve tuple kullanÄ±mÄ±",
      "DÃ¶ngÃ¼lerle iÅŸlem yapma",
      "Toplu nesne iÅŸlemleri",
      "Nesne koleksiyonlarÄ±"
    ]
  },
  {
    title: "AlÄ±ÅŸtÄ±rmalar",
    description: "Pratik yaparak Ã¶ÄŸrenin",
    icon: <GraduationCap className="h-6 w-6" />,
    link: "/topics/python/nesne-tabanli-programlama/siniflar-ve-nesneler/alistirmalar",
    topics: [
      "BaÅŸlangÄ±Ã§ seviyesi Ã¶rnekler",
      "Orta seviye projeler",
      "Ä°leri seviye uygulamalar",
      "Test senaryolarÄ±"
    ]
  }
];

export default function SiniflarVeNesnelerPage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <MarkdownContent content={content} />
        
        {/* Concept Cards */}
        <div className="my-12">
          <h2 className="text-3xl font-bold mb-8">Ã–nemli Kavramlar</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {sections.map((section, index) => (
              <Card key={index} className="bg-blue-50 hover:bg-blue-100 dark:bg-blue-950/50 dark:hover:bg-blue-950/70 transition-all duration-300">
                <CardHeader>
                  <div className="flex items-center gap-3 mb-2">
                    <div className="p-2 rounded-lg text-blue-600 dark:text-blue-400">
                      {section.icon}
                    </div>
                    <CardTitle>{section.title}</CardTitle>
                  </div>
                  <CardDescription className="dark:text-gray-300">{section.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground dark:text-gray-400">
                    {section.topics.map((topic, i) => (
                      <li key={i}>{topic}</li>
                    ))}
                  </ul>
                </CardContent>
                {section.link && (
                  <CardFooter>
                    <Button asChild variant="outline" className="w-full group">
                      <Link href={section.link}>
                        DetaylÄ± Ä°ncele
                        <ArrowRight className="h-4 w-4 ml-2 transition-transform group-hover:translate-x-1" />
                      </Link>
                    </Button>
                  </CardFooter>
                )}
              </Card>
            ))}
          </div>
        </div>

        {/* Next Topic Button */}
        <div className="mt-12 flex justify-end">
          <Button asChild className="group">
            <Link href="/topics/python/nesne-tabanli-programlama/kalitim">
              Sonraki Konu: KalÄ±tÄ±m
              <ArrowRight className="h-4 w-4 ml-2 transition-transform group-hover:translate-x-1" />
            </Link>
          </Button>
        </div>
      </div>
    </div>
  );
} 